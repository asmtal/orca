pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            app: build-pod
        spec:
          containers:
          - name: aws
            image: amazon/aws-cli:latest
            command:
              - /bin/cat
            tty: true
          - name: docker
            image: docker:latest
            command:
              - /bin/cat
            tty: true
            volumeMounts:
              - name: dind-certs
                mountPath: /certs
            env:
              - name: DOCKER_TLS_CERTDIR
                value: /certs
              - name: DOCKER_CERT_PATH
                value: /certs/client
              - name: DOCKER_TLS_VERIFY
                value: 1
              - name: DOCKER_HOST
                value: tcp://localhost:2376
          - name: dind
            image: docker:dind
            securityContext:
              privileged: true
            env:
              - name: DOCKER_TLS_CERTDIR
                value: /certs
            volumeMounts:
              - name: dind-storage
                mountPath: /var/lib/docker
              - name: dind-certs
                mountPath: /certs
          volumes:
          - name: dind-storage
            emptyDir: {}
          - name: dind-certs
            emptyDir: {}
        '''
    }
  }
  environment {
    AWS_REGION = 'eu-central-1'
    ACCOUNT_ID = '904627253972'
    MAJOR_VERSION = 'v1'
  }
  stages {
    stage('Retrieve AWS token') {
      steps {
        container('aws') {
          script {
            AWS_TOKEN = sh (
              script: "aws ecr get-login-password --region ${AWS_REGION}",
              returnStdout: true
            ).trim()
          }
        }
      }
    }
    stage('Run docker login') {
      steps {
        container('docker') {
          sh "echo ${AWS_TOKEN} | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        }
      }
    }
    stage('Build and tag docker image') {
      steps {
        container('docker') {
          dir('app') {
            sh 'docker build -t my-app .'
            sh "docker tag my-app:latest ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/my-app:${MAJOR_VERSION}.${BUILD_NUMBER}"
          }
        }
      }
    }
    stage('Push docker image to ECR') {
      steps {
        container('docker') {
          sh "docker push ${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/my-app:${MAJOR_VERSION}.${BUILD_NUMBER}"
        }
      }
    }
  }
}
